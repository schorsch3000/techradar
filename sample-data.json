[
  {
    "name": "In Progress",
    "ring": "einsetzen",
    "quadrant": "Methoden & Techniken",
    "isNew": true,
    "description": "Methoden und Techniken für den JavaScript-Radar befinden sich noch in der Entwicklung"
  },
  {
    "name": "Electron",
    "ring": "evaluieren",
    "quadrant": "Plattformen",
    "isNew": 1,
    "description": "Electron (ehemals Atom Shell) ist ein von GitHub entwickeltes, quelloffenes Framework. Es ermöglicht die Entwicklung von grafischen Desktop-Applikationen mithilfe des Node.js-Frameworks, das ursprünglich für die Entwicklung von Webanwendungen eingesetzt wurde. Electron ist die Basis zweier bekannter freier Quellcode-Editoren: Atom und Visual Studio Code. In Kombination mit der großen Marktdurchdringung von JavaScript/TypeScript und Node.js kann Electron innerhalb des JavaScript-Stacks eine hohe Bedeutung für Desktop-Applikationen im Projektkontext entwickeln."
  },
  {
    "name": "NodeJS - Server-Side-JavaScript",
    "ring": "evaluieren",
    "quadrant": "Plattformen",
    "isNew": true,
    "description": "JavaScript gewinnt zunehmend an Verbreitung, auch im Enterprise-Kontext und bei der serverseitigen Programmierung. Die Nutzung der selben Sprache über Web-Frontend und Server verspricht grundsätzliche Effizienzgewinne. Die Integration in die JVM, z.B. durch Nashorn, bietet einen Migrationspfad und die Möglichkeit die reichhaltige Java-Welt einzubinden."
  },
  {
    "name": "Angular (2)",
    "ring": "einsetzen",
    "quadrant": "Sprachen & Frameworks",
    "isNew": false,
    "description": "Die Folgeversion von Angular JS stellt den Quasi-Standard für die Implementierung von komplexen Single Page Applikationen dar. Der erfolgreiche Einsatz von Angular (JS) in adesso-Projekten empfiehlt auch die weitere Verwendung diese Frameworks. Wenn es weniger Anforderungen an eine vollumfängliche Framework-Unterstützung gibt, dann ist auch ReactJS eine relevante Alternative."
  },
  {
    "name": "ReactJS",
    "ring": "einsetzen",
    "quadrant": "Sprachen & Frameworks",
    "isNew": true,
    "description": "ReactJS hat sich als weiterer großer Player für die Entwicklung von Web-Anwendungen etabliert. Im Vergleich zu Angular ist React weniger umfangreich, eher als Bibliothek zu werten, und bedarf ggf. der Integration weiterer Bibliotheken für typische Anforderungen in Projekten. Dadurch ist es jedoch leichtgewichtiger und eröffnet höhere Freiheitsgrade."
  },
  {
    "name": "RxJS",
    "ring": "einsetzen",
    "quadrant": "Sprachen & Frameworks",
    "isNew": false,
    "description": "Reactive Programming Library für JavaScript. RxJS implementiert das Observable Pattern und bietet viele nützliche Funktionen um mit asynchronen Events und Daten umzugehen. Die Library ist eine Dependency von Angular und wird daher automatisch in jedem Angular 2+ Projekt eingesetzt. Es wird empfohlen die Version 5.x einzusetzen. RxJS 5 ist mit TypeScript entwickelt und harmoniert daher sehr gut mit TypeScript Projekten."
  },
  {
    "name": "TypeScript",
    "ring": "einsetzen",
    "quadrant": "Sprachen & Frameworks",
    "isNew": true,
    "description": "TypeScript fügt im Projektkontext nützliche Sprachfeatures wie Modularisierung, Objektorientierung und statische Typisierung ein, die dabei helfen Code zu strukturieren, Fehler früh zu erkennen und Refactorings günstig umzusetzen. Über Transpiler und automatisch erstellte Mappings wird auch das Debugging von TypeScript unterstützt und die Anforderungen an Browser für die Ausführung beschränken sich auf JavaScript-Unterstützung. "
  },
  {
    "name": "AngularJS (1)",
    "ring": "überdenken",
    "quadrant": "Sprachen & Frameworks",
    "isNew": false,
    "description": "Mit der Fertigstellung von Angular 2 sollte AngularJS nicht mehr eingesetzt werden, da eine spätere Migration zu Angular 2 sehr aufwändig ist. Der Fokus der Community und Weiterentwicklung liegt klar auf Angular. Zusätzlich implementiert Angular 2 zusätzliche aus unserer Sicht sinnvolle Eigenschaften, die auch der Projektumsetzung helfen."
  },
  {
    "name": "JavaScript",
    "ring": "überdenken",
    "quadrant": "Sprachen & Frameworks",
    "isNew": true,
    "description": "JavaScript wird zurückgestuft. Der Einsatz ist projektspezifisch zu erwägen, insbesondere sollte geprüft werden, ob TypeScript nicht die angemessenere Alternative ist. Dennoch ist JavaScript eine 'project-proven' Sprache."
  },
  {
    "name": "Codelyzer",
    "ring": "einsetzen",
    "quadrant": "Werkzeuge",
    "isNew": true,
    "description": "Codelyzer ist eine Erweiterung für den TypeScript Linter TSLint. Codelyzer erweitert das Ruleset von TSLint um Regeln für Angular Projekte. Beispielsweise kann so in Projekten garantiert werden, dass alle Components und Directives der gleichen Namenkonvention folgen."
  },
  {
    "name": "ESLint",
    "ring": "einsetzen",
    "quadrant": "Werkzeuge",
    "isNew": true,
    "description": "Linter für JavaScript. ES2015 wird unterstützt. Wenn kein TypeScript eingesetzt wird, sollte ESLint verwendet werden"
  },
  {
    "name": "GRUNT",
    "ring": "einsetzen",
    "quadrant": "Werkzeuge",
    "isNew": false,
    "description": "GRUNT ist, wie GULP, ein Build-System für JavaScript Anwendungen.  Grunt ist einfacher in der Handhabung, allerdings weniger geeignet für programmatische Anteile von Build-Aufgaben."
  },
  {
    "name": "GULP",
    "ring": "einsetzen",
    "quadrant": "Werkzeuge",
    "isNew": false,
    "description": "GULP ist wie GRUNT ein Build-Werkzeug für JavaScript-Projekte. Wir empfehlen GULP für komplexere Build-Aufgabenstellungen."
  },
  {
    "name": "Karma",
    "ring": "einsetzen",
    "quadrant": "Werkzeuge",
    "isNew": false,
    "description": "Karma epfehlen wir als Testumgebung für JavaScript Anwendungen. Karma hat einen vergleichbaren Stellenwert wie JUnit in der Java-Welt."
  },
  {
    "name": "npm",
    "ring": "einsetzen",
    "quadrant": "Werkzeuge",
    "isNew": false,
    "description": "NPM ist der etablierte Paketmanager für JavaScript-Anwendungen mit einer großen Community und mittlerweile auch für Frontendspezifische Pakete etabliert."
  },
  {
    "name": "npm",
    "ring": "einsetzen",
    "quadrant": "Werkzeuge",
    "isNew": 1,
    "description": "Der Node Package Manager (npm) ist ein Paketmanager für die JavaScript-Laufzeitumgebung node.js. Relevant in entsprechenden Node.js-Projekten."
  },
  {
    "name": "TSLint",
    "ring": "einsetzen",
    "quadrant": "Werkzeuge",
    "isNew": true,
    "description": "TSLint ist ein Linter für Typescript und stellt aktuell den \"Quasi Standard\" für TypeScript und Angular Projekte dar."
  },
  {
    "name": "Angular-CLI",
    "ring": "evaluieren",
    "quadrant": "Werkzeuge",
    "isNew": false,
    "description": "Das Angular Command-Line-Interface unterstützt bei der Erstellung von Boilerplate-Code und typischen Aufgaben wie der Erstellung von Komponenten mit dem (neuen) Angular 2 Framework. Langfristig könnte Angular-CLI scaffolding-Werkzeuge wie Yeoman ablösen. Aktuell ist Angular-CLI jedoch noch als unfertiges Werkzeug zu betrachten."
  },
  {
    "name": "Yarn",
    "ring": "evaluieren",
    "quadrant": "Werkzeuge",
    "isNew": true,
    "description": "Ein alternative Package Manager für das NPM Registry. Yarn ist Open Source und wird von Google und Facebook entwickelt. Vorteile gegenüber dem NPM Package Manager: Enorm schnellere Package Downloads, Deterministische Downloads (Lockfile), gute Offlinefähigkeit, Retry-mechanismus bei Package Downloads (gut für CI Umgebungen - weniger rote Builds durch Download Fehler)"
  },
  {
    "name": "Yeoman",
    "ring": "evaluieren",
    "quadrant": "Werkzeuge",
    "isNew": false,
    "description": "Das Scaffolding Framework Yeoman für JavaSript Anwendungen ist einen Blick wert. Unabhängig von bestimmten Frameworks. Für Angular 2 existiert mit Angular CLI eine Framework-spezifische Alternative."
  },
  {
    "name": "Bower",
    "ring": "überdenken",
    "quadrant": "Werkzeuge",
    "isNew": false,
    "description": "Package Manager für Java Script Anwendungen erlauben die Verwaltung der Abhängigkeiten. NPM hat sich auch als Paketmanager für die frontendspezifischen Pakete durchgesetzt. Daher ist aus unserer Sicht die Nutzung eines weiteren Werkzeugs nicht mehr notwendig."
  },
  {
    "name": "JavaScript Lint",
    "ring": "überdenken",
    "quadrant": "Werkzeuge",
    "isNew": false,
    "description": "Ein weiterer JavaScript-Linter, aktuell empfehlen wir aber in erster Linie ESLint, da ESLint mit ECMAScript 2015 kompatibel ist und aktiver weiterentwickelt wird."
  }
]